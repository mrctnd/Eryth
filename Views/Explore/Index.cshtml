@model Eryth.ViewModels.ExploreViewModel
@using Eryth.ViewModels
@{
    ViewData["Title"] = "Keşfet";
}

<div class="min-h-screen bg-black text-white">
    <!-- Hero Section with gradient background -->
    <div class="relative overflow-hidden">
        <!-- Background Pattern -->
        <div class="absolute inset-0 opacity-5">
            <div class="absolute inset-0" style="background-image: radial-gradient(circle at 1px 1px, #1DB954 1px, transparent 0); background-size: 30px 30px;"></div>
        </div>
        
        <!-- Floating Elements -->
        <div class="absolute top-10 right-20 w-32 h-32 bg-accent/10 rounded-full blur-xl animate-pulse"></div>
        <div class="absolute bottom-20 left-10 w-48 h-48 bg-accent/5 rounded-full blur-2xl animate-pulse delay-1000"></div>
        
        <div class="max-w-7xl mx-auto px-6 py-16 relative z-10">
            <div class="text-center mb-12">
                <h1 class="text-5xl md:text-6xl font-black tracking-tight leading-none mb-6">
                    <span class="text-transparent bg-clip-text bg-gradient-to-r from-accent to-white">Müziği</span> Keşfet
                </h1>
                <p class="text-xl text-gray-300 max-w-2xl mx-auto leading-relaxed">
                    En yeni şarkıları keşfedin, yeni sanatçıları bulun ve bir sonraki favori çalma listenizi keşfedin
                </p>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-6 pb-12 -mt-8 relative z-10">
        @if (!Model.HasAnyContent)
        {
            <div class="text-center py-20">
                <div class="w-24 h-24 bg-gradient-to-br from-accent/20 to-black rounded-3xl mx-auto mb-6 flex items-center justify-center">
                    <i data-lucide="search" class="w-12 h-12 text-accent"></i>
                </div>
                <h3 class="text-2xl font-bold text-white mb-4">İçerik mevcut değil</h3>
                <p class="text-gray-400 text-lg">Keşfedilecek yeni içerik için daha sonra tekrar kontrol edin</p>
            </div>
        }
        else
        {
            <!-- Users Section -->
            @if (Model.HasUsers)
            {
                <section class="mb-20">
                    <div class="flex items-center justify-between mb-10">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-gradient-to-br from-accent to-accent-dark rounded-xl flex items-center justify-center">
                                <i data-lucide="users" class="w-6 h-6 text-white"></i>
                            </div>
                            <div>
                                <h2 class="text-3xl font-bold text-white">Sanatçılar ve Kullanıcılar</h2>
                                <p class="text-gray-400 text-sm">Yetenekli yaratıcıları keşfedin</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2 bg-muted/50 rounded-full px-4 py-2">
                            <i data-lucide="users" class="w-4 h-4 text-accent"></i>
                            <span class="text-accent font-semibold">@Model.Users.Count</span>
                            <span class="text-gray-400 text-sm">sanatçı</span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                        @foreach (var user in Model.Users)
                        {
                            <div class="group bg-gradient-to-br from-muted to-black border border-muted/50 rounded-2xl p-8 hover:border-accent/30 transition-all duration-300 hover:transform hover:scale-105 hover:shadow-2xl hover:shadow-accent/10 cursor-pointer"
                                 onclick="location.href='@Url.Action("Profile", "User", new { username = user.Username })'">
                                <!-- Profile Image -->
                                <div class="flex flex-col items-center text-center">
                                    @if (!string.IsNullOrEmpty(user.ProfileImageUrl))
                                    {
                                        <div class="relative mb-6">
                                            <img src="@(user.ProfileImageUrl?.StartsWith("/") == true ? user.ProfileImageUrl : "/" + (user.ProfileImageUrl ?? ""))" alt="@user.Username" 
                                                 class="w-24 h-24 rounded-full object-cover group-hover:scale-110 transition-transform duration-300 shadow-xl">
                                            <div class="absolute inset-0 rounded-full ring-4 ring-accent/20 group-hover:ring-accent/40 transition-all duration-300"></div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="relative mb-6">
                                            <div class="w-24 h-24 rounded-full bg-gradient-to-br from-accent to-accent-dark flex items-center justify-center group-hover:scale-110 transition-transform duration-300 shadow-xl">
                                                <i data-lucide="user" class="w-12 h-12 text-white"></i>
                                            </div>
                                            <div class="absolute inset-0 rounded-full ring-4 ring-accent/20 group-hover:ring-accent/40 transition-all duration-300"></div>
                                        </div>
                                    }
                                    
                                    <!-- User Info -->
                                    <h3 class="text-xl font-bold text-white mb-2 truncate w-full group-hover:text-accent transition-colors duration-300">@user.DisplayName</h3>
                                    <p class="text-gray-400 text-sm mb-4 font-medium">@@@user.Username</p>
                                    
                                    <!-- Stats -->
                                    <div class="flex items-center justify-center space-x-6 text-sm">
                                        <div class="flex items-center space-x-1 text-gray-400">
                                            <i data-lucide="music" class="w-4 h-4 text-accent"></i>
                                            <span class="font-semibold text-white">@user.TrackCount</span>
                                            <span>şarkı</span>
                                        </div>
                                        <div class="flex items-center space-x-1 text-gray-400">
                                            <i data-lucide="users" class="w-4 h-4 text-accent"></i>
                                            <span class="font-semibold text-white">@user.FollowerCount</span>
                                            <span>takipçi</span>
                                        </div>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(user.Bio))
                                    {
                                        <p class="text-gray-400 text-sm mt-4 line-clamp-3 leading-relaxed">@user.Bio</p>
                                    }

                                    <!-- Follow Button -->
                                    <div class="mt-4 pt-4 border-t border-white/10">
                                        @{
                                            var artistFollowModel = FollowButtonViewModel.ForArtist(user.Id, false, null, false);
                                            artistFollowModel.CssClasses = "w-full py-2 px-4 text-sm";
                                        }
                                        @await Html.PartialAsync("_FollowButton", artistFollowModel)
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }

            <!-- Tracks Section -->
            @if (Model.HasTracks)
            {
                <section class="mb-20">
                    <div class="flex items-center justify-between mb-10">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-gradient-to-br from-accent to-accent-dark rounded-xl flex items-center justify-center">
                                <i data-lucide="music" class="w-6 h-6 text-white"></i>
                            </div>
                            <div>
                                <h2 class="text-3xl font-bold text-white">En Yeni Şarkılar</h2>
                                <p class="text-gray-400 text-sm">Yetenekli sanatçılardan taze müzikler</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2 bg-muted/50 rounded-full px-4 py-2">
                            <i data-lucide="music" class="w-4 h-4 text-accent"></i>
                            <span class="text-accent font-semibold">@Model.Tracks.Count</span>
                            <span class="text-gray-400 text-sm">şarkı</span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                        @foreach (var track in Model.Tracks)
                        {
                            <div class="group bg-gradient-to-br from-muted to-black border border-muted/50 rounded-2xl overflow-hidden hover:border-accent/30 transition-all duration-300 hover:transform hover:scale-105 hover:shadow-2xl hover:shadow-accent/10 cursor-pointer"
                                 onclick="playTrackFromExplore('@track.Id')">
                                <!-- Cover Image -->
                                <div class="relative aspect-square overflow-hidden">
                                    @if (!string.IsNullOrEmpty(track.CoverImageUrl))
                                    {
                                        <img src="@(track.CoverImageUrl?.StartsWith("/") == true ? track.CoverImageUrl : "/" + (track.CoverImageUrl ?? ""))" alt="@track.Title" 
                                             class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500">
                                    }
                                    else
                                    {
                                        <div class="w-full h-full bg-gradient-to-br from-accent/20 to-black flex items-center justify-center">
                                            <i data-lucide="music" class="w-20 h-20 text-accent/60"></i>
                                        </div>
                                    }
                                    
                                    <!-- Play Button Overlay -->
                                    <div class="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                                        <button class="bg-accent hover:bg-accent-dark text-white p-4 rounded-full transition-all duration-200 transform scale-90 group-hover:scale-100 shadow-2xl"
                                                onclick="event.stopPropagation(); playTrackFromExplore('@track.Id')">
                                            <i data-lucide="play" class="w-8 h-8 ml-1"></i>
                                        </button>
                                    </div>
                                    
                                    <!-- Gradient Overlay -->
                                    <div class="absolute bottom-0 left-0 right-0 h-1/3 bg-gradient-to-t from-black/80 to-transparent"></div>
                                </div>
                                
                                <!-- Track Info -->
                                <div class="p-6">
                                    <h3 class="text-white font-bold mb-2 truncate cursor-pointer hover:text-accent transition-colors duration-200 text-lg group-hover:text-accent"
                                        onclick="location.href='@Url.Action("Details", "Track", new { id = track.Id })'">
                                        @track.Title
                                    </h3>
                                    <p class="text-gray-400 cursor-pointer hover:text-white transition-colors duration-200 font-medium"
                                       onclick="location.href='@Url.Action("Profile", "User", new { username = track.ArtistName })'">
                                        @track.ArtistName
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }

            <!-- Playlists Section -->
            @if (Model.HasPlaylists)
            {
                <section class="mb-20">
                    <div class="flex items-center justify-between mb-10">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-gradient-to-br from-accent to-accent-dark rounded-xl flex items-center justify-center">
                                <i data-lucide="list-music" class="w-6 h-6 text-white"></i>
                            </div>
                            <div>
                                <h2 class="text-3xl font-bold text-white">Herkese Açık Çalma Listeleri</h2>
                                <p class="text-gray-400 text-sm">Topluluktan özenle seçilmiş koleksiyonlar</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2 bg-muted/50 rounded-full px-4 py-2">
                            <i data-lucide="list-music" class="w-4 h-4 text-accent"></i>
                            <span class="text-accent font-semibold">@Model.Playlists.Count</span>
                            <span class="text-gray-400 text-sm">çalma listesi</span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                        @foreach (var playlist in Model.Playlists)
                        {
                            <div class="group bg-gradient-to-br from-muted to-black border border-muted/50 rounded-2xl overflow-hidden hover:border-accent/30 transition-all duration-300 hover:transform hover:scale-105 hover:shadow-2xl hover:shadow-accent/10 cursor-pointer"
                                 onclick="location.href='@Url.Action("Details", "Playlist", new { id = playlist.Id })'">
                                <!-- Cover Image -->
                                <div class="relative aspect-square overflow-hidden">
                                    @if (!string.IsNullOrEmpty(playlist.CoverImageUrl))
                                    {
                                        <img src="@(playlist.CoverImageUrl?.StartsWith("/") == true ? playlist.CoverImageUrl : "/" + (playlist.CoverImageUrl ?? ""))" alt="@playlist.Name" 
                                             class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500">
                                    }
                                    else
                                    {
                                        <div class="w-full h-full bg-gradient-to-br from-accent/20 to-black flex items-center justify-center">
                                            <i data-lucide="list-music" class="w-20 h-20 text-accent/60"></i>
                                        </div>
                                    }
                                    
                                    <!-- Play Button Overlay -->
                                    <div class="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                                        <button class="bg-accent hover:bg-accent-dark text-white p-4 rounded-full transition-all duration-200 transform scale-90 group-hover:scale-100 shadow-2xl"
                                                onclick="event.stopPropagation(); playPlaylist('@playlist.Id')">
                                            <i data-lucide="play" class="w-8 h-8 ml-1"></i>
                                        </button>
                                    </div>
                                    
                                    <!-- Gradient Overlay -->
                                    <div class="absolute bottom-0 left-0 right-0 h-1/3 bg-gradient-to-t from-black/80 to-transparent"></div>
                                </div>
                                
                                <!-- Playlist Info -->
                                <div class="p-6">
                                    <h3 class="text-white font-bold mb-2 truncate text-lg group-hover:text-accent transition-colors duration-300">@playlist.Name</h3>
                                    <p class="text-gray-400 mb-4 font-medium">by @playlist.OwnerUsername</p>
                                    
                                    @if (!string.IsNullOrEmpty(playlist.Description))
                                    {
                                        <p class="text-gray-500 text-sm mb-4 line-clamp-2 leading-relaxed">@playlist.Description</p>
                                    }
                                    
                                    <!-- Stats -->
                                    <div class="flex items-center justify-between text-sm">
                                        <div class="flex items-center space-x-1 text-gray-400">
                                            <i data-lucide="music" class="w-4 h-4 text-accent"></i>
                                            <span class="text-white font-semibold">@playlist.TrackCount</span>
                                            <span>şarkı</span>
                                        </div>
                                        <span class="text-gray-500">@playlist.FormattedDuration</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }

            <!-- Albums Section -->
            @if (Model.HasAlbums)
            {
                <section class="mb-20">
                    <div class="flex items-center justify-between mb-10">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-gradient-to-br from-accent to-accent-dark rounded-xl flex items-center justify-center">
                                <i data-lucide="disc" class="w-6 h-6 text-white"></i>
                            </div>
                            <div>
                                <h2 class="text-3xl font-bold text-white">En Yeni Albümler</h2>
                                <p class="text-gray-400 text-sm">Eksiksiz müzikal yolculuklar</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2 bg-muted/50 rounded-full px-4 py-2">
                            <i data-lucide="disc" class="w-4 h-4 text-accent"></i>
                            <span class="text-accent font-semibold">@Model.Albums.Count</span>
                            <span class="text-gray-400 text-sm">albüm</span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                        @foreach (var album in Model.Albums)
                        {
                            <div class="group bg-gradient-to-br from-muted to-black border border-muted/50 rounded-2xl overflow-hidden hover:border-accent/30 transition-all duration-300 hover:transform hover:scale-105 hover:shadow-2xl hover:shadow-accent/10 cursor-pointer"
                                 onclick="location.href='@Url.Action("Details", "Album", new { id = album.Id })'">
                                <!-- Cover Image -->
                                <div class="relative aspect-square overflow-hidden">
                                    @if (!string.IsNullOrEmpty(album.CoverImageUrl))
                                    {
                                        <img src="@(album.CoverImageUrl?.StartsWith("/") == true ? album.CoverImageUrl : "/" + (album.CoverImageUrl ?? ""))" alt="@album.Title" 
                                             class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500">
                                    }
                                    else
                                    {
                                        <div class="w-full h-full bg-gradient-to-br from-accent/20 to-black flex items-center justify-center">
                                            <i data-lucide="disc" class="w-20 h-20 text-accent/60"></i>
                                        </div>
                                    }
                                    
                                    <!-- Play Button Overlay -->
                                    <div class="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                                        <button class="bg-accent hover:bg-accent-dark text-white p-4 rounded-full transition-all duration-200 transform scale-90 group-hover:scale-100 shadow-2xl"
                                                onclick="event.stopPropagation(); playAlbum('@album.Id')">
                                            <i data-lucide="play" class="w-8 h-8 ml-1"></i>
                                        </button>
                                    </div>
                                    
                                    <!-- Gradient Overlay -->
                                    <div class="absolute bottom-0 left-0 right-0 h-1/3 bg-gradient-to-t from-black/80 to-transparent"></div>
                                </div>
                                
                                <!-- Album Info -->
                                <div class="p-6">
                                    <h3 class="text-white font-bold mb-2 truncate text-lg group-hover:text-accent transition-colors duration-300">@album.Title</h3>
                                    <p class="text-gray-400 mb-4 font-medium">by @album.ArtistName</p>
                                    
                                    @if (!string.IsNullOrEmpty(album.Description))
                                    {
                                        <p class="text-gray-500 text-sm mb-4 line-clamp-2 leading-relaxed">@album.Description</p>
                                    }
                                    
                                    <!-- Stats -->
                                    <div class="flex items-center justify-between text-sm">
                                        <div class="flex items-center space-x-1 text-gray-400">
                                            <i data-lucide="music" class="w-4 h-4 text-accent"></i>
                                            <span class="text-white font-semibold">@album.TrackCount</span>
                                            <span>şarkı</span>
                                        </div>
                                        <span class="text-gray-500">@album.ReleaseDate.ToString("MMM yyyy")</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }

            <!-- Pagination -->
            @if (Model.HasNextPage || Model.CurrentPage > 1)
            {
                <div class="flex justify-center mt-16 space-x-6">
                    @if (Model.CurrentPage > 1)
                    {
                        <a href="@Url.Action("Index", "Explore", new { page = Model.CurrentPage - 1 })" 
                           class="group bg-gradient-to-r from-muted to-black border border-muted/50 hover:border-accent/30 text-white px-8 py-4 rounded-xl transition-all duration-300 hover:transform hover:scale-105 flex items-center space-x-3 shadow-lg hover:shadow-accent/20">
                            <i data-lucide="chevron-left" class="w-5 h-5 group-hover:text-accent transition-colors duration-300"></i>
                            <span class="font-semibold">Önceki</span>
                        </a>
                    }
                    @if (Model.HasNextPage)
                    {
                        <a href="@Url.Action("Index", "Explore", new { page = Model.CurrentPage + 1 })" 
                           class="group bg-gradient-to-r from-accent to-accent-dark hover:from-accent-dark hover:to-accent text-white px-8 py-4 rounded-xl transition-all duration-300 hover:transform hover:scale-105 flex items-center space-x-3 shadow-lg hover:shadow-accent/30">
                            <span class="font-semibold">Sonraki</span>
                            <i data-lucide="chevron-right" class="w-5 h-5"></i>
                        </a>
                    }
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        // Track data for JavaScript access
        const trackData = {
            @foreach (var track in Model.Tracks)
            {
                <text>'@track.Id': {
                    id: '@track.Id',
                    title: @Html.Raw(Json.Serialize(track.Title)),
                    artist: @Html.Raw(Json.Serialize(track.ArtistName)),
                    audioUrl: '@(track.AudioFileUrl.StartsWith("/") ? track.AudioFileUrl : "/" + track.AudioFileUrl)',
                    coverImage: '@track.CoverImageUrl'
                },</text>
            }
        };
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Lucide icons
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            
            // Debug: Check if trackData is populated
            console.log('Explore page - trackData:', trackData);
            console.log('Explore page - playTrack function exists:', typeof window.playTrack !== 'undefined');
        });
        
        // Play track function for Explore page
        function playTrackFromExplore(trackId) {
            console.log('playTrackFromExplore called with trackId:', trackId);
            console.log('Available tracks in trackData:', Object.keys(trackData));
            
            const track = trackData[trackId];
            if (track) {
                console.log('Track found:', track);
                // Use the global playTrack function from audioPlayer.js
                if (typeof window.playTrack === 'function') {
                    window.playTrack(track.id, track.title, track.artist, track.audioUrl, track.coverImage);
                } else {
                    console.error('Global playTrack function not found - check if audioPlayer.js is loaded');
                }
            } else {
                console.error('Track not found:', trackId);
                console.error('Available track IDs:', Object.keys(trackData));
            }
        }

        // Play playlist function
        function playPlaylist(playlistId) {
            console.log('Playing playlist via audioPlayer.js:', playlistId);
            // TODO: Implement playlist play functionality with audioPlayer.js
        }

        // Play album function
        function playAlbum(albumId) {
            console.log('Playing album via audioPlayer.js:', albumId);
            // TODO: Implement album play functionality with audioPlayer.js
        }
    </script>
}
